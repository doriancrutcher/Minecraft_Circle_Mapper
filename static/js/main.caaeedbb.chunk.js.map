{"version":3,"sources":["Components/Controls/Controls.module.css","Components/Coordinates/Coordinates.module.css","Components/Coordinates/Coordinates.js","Components/Controls/Canvas/Canvas.js","Components/Controls/Controls.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Coordinates","yval","props","r","x","coorCont","display","flexDirection","justifyContent","alignItems","Fragment","className","Styles","CoorCont","this","Math","floor","Component","Canvas","Cwidth","window","innerWidth","Cheight","CanvasStyle","marginLeft","transform","UpdateCanvas","ctx","refs","canvas","getContext","fillStyle","fillRect","makeSquares","radius","makeGrid","state","Radius","width","height","updateWindowDimensions","bind","addEventListener","removeEventListener","setState","innerHeight","squareDim","i","y","z","style","ref","Controls","getTextVal","TextInput","value","DisplayOne","console","log","One","ChartData","parseInt","current","CanvasDisp","Output","push","CoordinatesDisp","React","createRef","nextProps","nextState","prevProps","prevState","ControlsContainer","text","placeholder","onClick","App","showCoordinates","DisplayData","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.caaeedbb.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"CoorCont\":\"Controls_CoorCont__2_4Kl\",\"ControlsContainer\":\"Controls_ControlsContainer__1lZnG\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"CoorCont\":\"Coordinates_CoorCont__2sBCp\"};","import React, { Component } from 'react';\nimport Styles from './Coordinates.module.css'\nclass Coordinates extends Component {\n\n\n     yval=(this.props.r**2-this.props.x**2)**0.5;\n\n     coorCont={\n         display:'flex',\n         flexDirection:'column',\n         justifyContent:'center',\n         alignItems:'center'\n     }\n\n    render() {\n\n\n\n        return (\n            <React.Fragment>\n                <div className={Styles.CoorCont}>\n                <div>{this.props.x}</div>\n                <div>{Math.floor(this.yval)}</div>\n                </div>\n            </React.Fragment>\n        );\n    }\n}\n\nexport default Coordinates;","import React, { Component } from 'react';\nimport './Canvas.css'\n\nclass Canvas extends Component {\n    constructor(props){\n        super(props)\n        this.state={\n            Radius:0,\n            width:0,\n            height:0\n            \n        }\n        this.updateWindowDimensions = this.updateWindowDimensions.bind(this);\n    }\n\n    Cwidth=window.innerWidth*0.3333;\n    Cheight=this.Cwidth;\n   \n    CanvasStyle={\n        display:'inline',\n        marginLeft: window.innerWidth/3,\n        transform: 'translateX(-50%)'\n    }\n    \n\n    componentDidMount(){\n        this.UpdateCanvas();\n        this.updateWindowDimensions();\n        window.addEventListener('resize', this.updateWindowDimensions);\n        //this.Cwidth=this.state.height*0.5;\n       // this.Cheight=this.Cwidth;\n        \n    }\n\n    componentWillUpdate(){\n       \n    }\n\n    componentDidUpdate(){\n        this.UpdateCanvas()\n    }\n\n    componentWillUnmount(){\n        window.removeEventListener('resize', this.updateWindowDimensions);\n    }\n\n    updateWindowDimensions() {\n        this.setState({ width: window.innerWidth, height: window.innerHeight });\n      }\n\n\n    UpdateCanvas=()=>{\n\n        //this is all assuming a radius of 5\n        const ctx = this.refs.canvas.getContext('2d');\n        ctx.fillStyle='white';\n        ctx.fillRect(0,0, this.Cwidth,this.Cwidth);\n        ctx.fillStyle='Blue';\n        this.makeSquares(this.props.radius,ctx);\n        ctx.fillStyle='Black';\n        this.makeGrid(this.props.radius,ctx);\n    }\n\n    makeSquares(r,ctx){\n       \n        let squareDim=this.Cwidth/(2*(r+1));\n        //top right quadrant\n        for(let i=0;i<r;i++){\n\n            let y\n            if (i===0){\n                y=r-Math.floor((r**2-(i+1)**2)**0.5)\n            }\n            else{\n                y=r-Math.floor((r**2-(i+1)**2)**0.5)\n            }\n          \n            \n            for(let z=0; z<r+1-y;z++){\n            ctx.fillRect(this.Cwidth*(i/(2*(r+1)))+(this.Cwidth/2),this.Cwidth*(y+z)/(2*(r+1)),this.Cwidth/(2*(r+1)),this.Cwidth/(2*(r+1)))\n            ctx.fillRect(-squareDim-this.Cwidth*(i/(2*(r+1)))+(this.Cwidth/2),this.Cwidth*(z+y)/(2*(r+1)),this.Cwidth/(2*(r+1)),this.Cwidth/(2*(r+1)))\n            ctx.fillRect(this.Cwidth*((i)/(2*(r+1)))+(this.Cwidth/2),-squareDim+this.Cwidth+this.Cwidth*(-y-z)/(2*(r+1)),this.Cwidth/(2*(r+1)),this.Cwidth/(2*(r+1)))\n            ctx.fillRect(-squareDim-this.Cwidth*(i/(2*(r+1)))+(this.Cwidth/2),-squareDim+this.Cwidth+this.Cwidth*(-z-y)/(2*(r+1)),this.Cwidth/(2*(r+1)),this.Cwidth/(2*(r+1)))\n\n            ctx.fillRect(this.Cwidth*(y+z)/(2*(r+1)),this.Cwidth*(i/(2*(r+1)))+(this.Cwidth/2),this.Cwidth/(2*(r+1)),this.Cwidth/(2*(r+1)))\n            ctx.fillRect(this.Cwidth*(z+y)/(2*(r+1)),-squareDim-this.Cwidth*(i/(2*(r+1)))+(this.Cwidth/2),this.Cwidth/(2*(r+1)),this.Cwidth/(2*(r+1)))\n            ctx.fillRect(-squareDim+this.Cwidth+this.Cwidth*(-y-z)/(2*(r+1)),this.Cwidth*((i)/(2*(r+1)))+(this.Cwidth/2),this.Cwidth/(2*(r+1)),this.Cwidth/(2*(r+1)))\n            ctx.fillRect(-squareDim+this.Cwidth+this.Cwidth*(-z-y)/(2*(r+1)),-squareDim-this.Cwidth*(i/(2*(r+1)))+(this.Cwidth/2),this.Cwidth/(2*(r+1)),this.Cwidth/(2*(r+1)))\n            }\n            \n           \n\n\n        }\n        \n    }\n\n    makeGrid(r,ctx){\n        \n        for(let i=0;i<2*r+4;i++){\n            ctx.fillRect(this.Cwidth*i/(2*r+2),0,r*0.1,this.Cheight);\n            ctx.fillRect(0,this.Cheight*i/(2*r+2),this.Cwidth,r*0.1);\n        }\n        \n    }\n\n    render() {\n        return (\n            <React.Fragment>\n                \n                <div className='canvCont'>\n                                <canvas style={this.CanvasStyle} width={`${this.Cwidth}px`} height={`${this.Cheight}px`} ref=\"canvas\"></canvas>\n                </div>\n            </React.Fragment>\n\n           \n        );\n    }\n}\n\nexport default Canvas;","import React, { Component } from 'react';\nimport Coordinates from './../Coordinates/Coordinates';\nimport Canvas from './Canvas/Canvas'\nimport Styles from './Controls.module.css';\n\n\nimport PropTypes from 'prop-types';\n\nclass Controls extends Component {\n    constructor(props) {\n        super(props);\n        this.state={\n            One:0,\n            Radius:0,\n            CoordinatesDisp:null,\n            CanvasDisp:<Canvas radius={this.Radius}/>\n        }\n\n                this.TextInput=React.createRef();\n\n\n    }\n\n    componentWillMount() {\n        console.log('willMount')\n\n\n    }\n\n    componentDidMount() {\n        console.log('Component did Mount')\n\n\n    }\n\n    componentWillReceiveProps(nextProps) {\n\n    }\n\n    shouldComponentUpdate(nextProps, nextState){\n        \n    \n        return true\n    }\n\n    componentWillUpdate(nextProps, nextState) {\n\n        return true\n    }\n\n    componentDidUpdate(prevProps, prevState) {\n        console.log('componentDidUpdate')\n    }\n\n    componentWillUnmount() {\n\n    }\n\n    \n\n    Functions\n    getTextVal=()=>{\n        return this.TextInput.value\n    }\n\n    DisplayOne=()=>{\n        console.log('button hit')\n        this.setState({One:1})\n    }\n\n      ChartData=()=>{\n    let r=parseInt(this.TextInput.current.value)\n    this.setState({\n        CanvasDisp:<Canvas radius={r}/>\n\n    })\n\n    let Output=[]\n    for (let i = 0 ; i<r+1 ;i++){\n      Output.push(<Coordinates x={i} r={r}/>)\n    }\n\n   \n    this.setState({CoordinatesDisp:Output})\n    \n    \n   \n  }\n\n    \n\n    render() {\n\n       \n        console.log('render')\n        return (\n            <React.Fragment>\n                <div className={Styles.ControlsContainer}>\n                <div className={Styles.CoorCont}>\n                    <div>\n                {/* {(this.state.CoordinatesDisp)?this.state.CoordinatesDisp:null} */}\n                    </div>\n                    {this.state.CanvasDisp}\n\n                </div>\n                <input text='input' placeholder=\"Enter Radius\" ref={this.TextInput}></input>\n                <button onClick={this.ChartData}>Submit</button>\n                </div>\n            </React.Fragment>\n        );\n    }\n}\n\n\n\nexport default Controls;\n\n// class Controls extends Component {\n//     constructor(props){\n//         super(props)\n//         this.state={\n//             radius:0,\n//             CoordinatesDisp:null,\n//             CanvasC:<Canvas radius={9}/>\n\n//         }\n//         this.TextInput=React.createRef();\n        \n//     }\n\n\n\n    \n\n//     getTextVal=()=>{\n//         return this.TextInput.value\n//     }\n\n    \n\n\n//   ChartData=()=>{\n//     let r=parseInt(this.TextInput.current.value)\n//     let Output=[]\n//     for (let i = 0 ; i<r+1 ;i++){\n//       Output.push(<Coordinates x={i} r={r}/>)\n//     }\n//     console.log(Output)\n//     this.setState({CoordinatesDisp:Output})\n//     console.log(this.state.CoordinatesDisp)\n//     this.updateCanvas(r)\n//   }\n//   updateCanvas=(r)=>{\n//     this.CanvOut=<Canvas radius={r}/>\n// }\n//     CanvOut=<Canvas></Canvas>\n//     render() {\n       \n\n//         return (\n//             <React.Fragment>\n//                 {this.CanvOut}\n            \n//                 <div className={Styles.CoorCont}>\n//                     {this.state.CoordinatesDisp}\n//                 </div>\n//                 <input text='input' placeholder=\"Enter Radius\" ref={this.TextInput}></input>\n//                 <button onClick={this.ChartData}>Submit</button>\n//             </React.Fragment>\n//         );\n//     }\n// }\n\n\n// export default Controls;","import React, { Component } from 'react';\nimport './App.css';\nimport Controls from './Components/Controls/Controls'\nimport Coordinates from './Components/Coordinates/Coordinates'\n\nclass App extends Component {\n  constructor (props){\n    super(props)\n    this.state={\n      showCoordinates:false,\n      DisplayData:<div>hhi</div>\n    }\n  \n\n  }\n\n\n\n  render(){\n  return (\n    \n    <div className=\"App\">\n      <div className=\"TitleBlock\"> \n      <div>Minecraft Circle Generator</div>\n    \n      </div>\n      <Controls/>\n      <div className=\"Signature\"> \n      <div className=\"ContactBlock\">\n      <div className=\"ContactItems\">Dorian Kinoo Crutcher</div>\n      <div className=\"ContactItems\">Email: doriankinoorutcher@gmail.com</div>\n      </div>\n      </div>\n    </div>\n    \n  );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}